@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 9),
        Title = "For Loops",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Paragraphs = new string[]
        {
            "By now you should be moderately used to using <code>while</code> loops to iterate over " + Model.ArrayNamePlural + ". The <code>for</code> loop is like a fancier, longer version of the <code>while</code> loop that makes it easier to iterate over things.",
            "The syntax of for loops in ruby is a little different to other languages:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                "for" + Model.ConditionalLeft + "i in 0.." + Model.UseLength("sports") + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon + Model.Commentor + " 0 1 2 3",
                Model.ConditionalEnd,
                "",
                "for" + Model.ConditionalLeft + "i in 0..." + Model.UseLength("sports") + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon + Model.Commentor + " 0 1 2",
                Model.ConditionalEnd
            }),
            "The top of the <code>for</code> loop has three sections.",
            Section.WrapList(true, new string[]
            {
                "The first is run before the loop starts. You must initialize a variable here. This is the variable that will change as your loop runs. This loop initializes <code>i</code> here.",
                "The second is the first value for the initialized variable. In this case it is <code>0</code> but it could be whatever you want it to be. Note, that this is the first value for <code>i</code> when the loop starts.",
                "The third is the last value for the initialized variable. Here's where things get tricky. If your for loop uses <code>..</code> this value is inclusive (meaning it will be evaluated as the last value in the loop). However, if you use <code>...</code> this value is exclusive (meaning the value before it will be evaluaed as the last value in the loop). Try both and see what happens."
            }),
            "The above <code>for</code> loop works the same as this <code>while</code> loop:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                Model.VariableDeclare + "i = 0" + Model.Semicolon,
                "while" + Model.ConditionalLeft + "i < " + Model.UseLength("sports") + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                "    i = i + 1" + Model.Semicolon,
                Model.ConditionalEnd
            }),
            "Because <code>for</code> loops work so similarly to <code>while</code> loops, pretty much every single chunk of code that uses a <code>while</code> loop could also be written using a <code>for</code> loop (and vice versa!)."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Write a <code>for</code> loop to print all numbers less than 14.",
                "Write a <code>for</code> loop to print all numbers less than 14, starting with 7.",
                "Create a new " + Model.ArrayName + ", then write a <code>for</code> loop that copies all numbers less than 14 into that " + Model.ArrayName + ". Print the Array.",
                "Create a blank String, then write a <code>for</code> loop that copies all numbers from the previous example into it. Print the String."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Write a <code>for</code> loop to print all numbers less than 14." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "for" + Model.ConditionalLeft + "i in 0...14" + Model.ConditionalRight,
                    "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                    Model.ConditionalEnd
                }),
                "Write a <code>for</code> loop to print all numbers less than 14, starting with 7." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "for" + Model.ConditionalLeft + "i in 7...14" + Model.ConditionalRight,
                    "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                    Model.ConditionalEnd
                }),
                "Create a new " + Model.ArrayName + ", then write a <code>for</code> loop that copies all numbers less than 14 into that " + Model.ArrayName + "." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                    "for" + Model.ConditionalLeft + "i in 0...14"  + Model.ConditionalRight,
                    "    numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                    Model.ConditionalEnd,
                    Model.CallFunction(Model.PrintFunction, "numbers") + Model.Semicolon
                }),
                "Create a blank String, then write a <code>for</code> loop that copies all numbers from the previous example into it. Print the String." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                    Model.VariableDeclare + "output = \"\"" + Model.Semicolon,
                    "",
                    "for" + Model.ConditionalLeft + "i in 0...14"  + Model.ConditionalRight,
                    "    numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    "for" + Model.ConditionalLeft + "i in 0..." + Model.UseLength("numbers") + Model.ConditionalRight,
                    "    output = output + i.to_s" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.CallFunction(Model.PrintFunction, "output") + Model.Semicolon
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 10),
        Title = "For/In Loops",
        Paragraphs = new string[]
        {
            Model.Name + " also provides a similar syntax to easily loop over some objects. Python only allows you to use this type of loop (more info <a href=\"/Python/ForLoops\">here</a>), so if you've used Python it's the same thing.",
            "Instead of requiring a specific range, these loops only need some object to loop over: typically an " + Model.ArrayName + ", or (in later lessons) a " + Model.DictionaryName + ".",
            "The following three code blocks all do the same thing:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "colors = [\"red\", \"blue\", \"green\"]" + Model.Semicolon,
                "",
                "for" + Model.ConditionalLeft + Model.VariableDeclare + "color in colors" + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "color") + Model.Semicolon,
                Model.ConditionalEnd
            }),
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "colors = [\"red\", \"blue\", \"green\"]" + Model.Semicolon,
                "",
                "for" + Model.ConditionalLeft + "i in 0..." + Model.UseLength("colors") + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "colors[i]") + Model.Semicolon,
                Model.ConditionalEnd
            }),
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "colors = [\"red\", \"blue\", \"green\"]" + Model.Semicolon,
                Model.VariableDeclare + "i = 0" + Model.Semicolon,
                "",
                "while" + Model.ConditionalLeft + "i < " + Model.UseLength("colors") + Model.ConditionalRight,
                "    " + Model.CallFunction(Model.PrintFunction, "colors[i]") + Model.Semicolon,
                "    i = i + 1" + Model.Semicolon,
                Model.ConditionalEnd
            }),
            "This type of loop works by setting the designated variable to be each of the members of the object in order. The first time it's the first element (<code>[0]</code>), the second time the second element (<code>[1]</code>), and so on. Other languages call it <code>foreach</code>, which is frankly a better way of phrasing it: \"for each <em>*thing*</em> in <em>*this*</em>, do ...\""
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " of Strings. Use a <code>for</code>/<code>in</code> loop to add each element to a String. Print that String."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " of Strings. Use a <code>for</code>/<code>in</code> loop to add each element to a String. Print that String." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                    Model.VariableDeclare + "output = \"Sports are:\"" + Model.Semicolon,
                    "",
                    "for" + Model.ConditionalLeft + Model.VariableDeclare + "sport in sports" + Model.ConditionalRight,
                    "    output = output + sport" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.CallFunction(Model.PrintFunction, "output") + Model.Semicolon + " " + Model.Commentor + " \"Sports are: Basketball Football Soccer\""
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 11),
        Title = "Other Loops",
        Paragraphs = new string[]
        {
            "Now that you've learned about while loops and two different kinds of for loops it's time to throw it all out the window!",
            "Ruby offers many other types of loops that are often much better in terms of performance and style than the classic loops you have seen thus far.",
            "The following loops all do the same thing:",

            Section.WrapList(new string[]
            {
                "Until Loop" + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "",
                    "until" + Model.ConditionalLeft + "i == " + Model.UseLength("sports") + Model.ConditionalRight,
                    "    " + Model.CallFunction(Model.PrintFunction, "sports[i]") + Model.Semicolon,
                    "    " + "i += 1" + Model.Semicolon,
                    Model.ConditionalEnd,
                }) + "\nNotice this is very similar to a while loop.",
                "Until Loop (modified)" + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "",
                    "begin",
                    "    " + Model.CallFunction(Model.PrintFunction, "sports[i]") + Model.Semicolon,
                    "    " + "i += 1" + Model.Semicolon,
                    Model.ConditionalEnd + " until" + Model.ConditionalLeft + "i == " + Model.UseLength("sports") + Model.ConditionalRight + Model.Semicolon,
                }) + "\nThis version is rarely used but still useful to understand.",
                "Each" + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "sports = [\"Basketball\", \"Football\", \"Soccer\"]" + Model.Semicolon,
                    "sports.each { |sport|",
                    "    puts sport",
                    "}"
                }) + "\nThis works like the <code>in</code> loop we discussed earlier but is much better because it works on more types (like Strings!). Keep in mind that there are lots of different versions of the <code>each</code> method depending on what type of variable you want to iterate over. For example, Strings have <code>.each_char</code> and <code>.each_line</code>."
                    })
}
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
                {
            Section.WrapList(new string[]
            {
                "Write an <code>until</code> loop to print all the numbers less than 14.",
                "Write a modified <code>until</code> loop to pring all the numbers less than 14.",
                "Create a new " + Model.ArrayName + ", then write an <code>until</code> loop that copies all numbers less than 14 into that " + Model.ArrayName + ".",
                "Write an <code>until</code> loop to print all odd numbers less than 14, starting with 7.",
                "Make a variable equal to your name. Using <code>each</code>, copy all characters from it into a new " + Model.ArrayName + ". Print that " + Model.ArrayName + "."
            })
                }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Write an <code>until</code> loop to print all the numbers less than 14." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "until" + Model.ConditionalLeft + "i == 14" + Model.ConditionalRight,
                    "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                    "    " + "i += 1" + Model.Semicolon,
                    Model.ConditionalEnd
                }),
                "Write a modified <code>until</code> loop to pring all the numbers less than 14." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "begin",
                    "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                    "    " + "i += 1" + Model.Semicolon,
                    Model.ConditionalEnd + " until" + Model.ConditionalLeft + "i == 14"
                }),
                "Create a new " + Model.ArrayName + ", then write an <code>until</code> loop that copies all numbers less than 14 into that " + Model.ArrayName + "." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "until" + Model.ConditionalLeft + "i == 14" + Model.ConditionalRight,
                    "    " + "numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                    "    " + "i += 1" + Model.Semicolon,
                    Model.ConditionalEnd,
                    Model.CallFunction(Model.PrintFunction, "numbers") + Model.Semicolon
                }),
                "Write an <code>until</code> loop to print all odd numbers less than 14, starting with 7." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "i = 7" + Model.Semicolon,
                    "until" + Model.ConditionalLeft + "i >= 14" + Model.ConditionalRight,
                    "    " + Model.CallFunction(Model.PrintFunction, "i") + Model.Semicolon,
                    "    " + "i += 2" + Model.Semicolon,
                    Model.ConditionalEnd,
                }),
                "Make a variable equal to your name. Using <code>each</code>, copy all characters from it into a new " + Model.ArrayName + ". Print that " + Model.ArrayName + "." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "name = \"Will\"" + Model.Semicolon,
                    Model.VariableDeclare + "letters = []" + Model.Semicolon,
                    "name.each_char { |letter|",
                    "    " + "letters." + Model.AppendFunction + "(letter)" + Model.Semicolon,
                    "}",
                    Model.CallFunction(Model.PrintFunction, "letters")
                })
            })
        }
    });

    Html.RenderPartial(Section.SwitcherFile, new KeyValuePair<string, string>(Model.Name, "For Loops"));
}