@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 8),
        Title = Model.ArrayNamePlural,
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Paragraphs = new string[]
        {
            Model.ArrayNamePlural + " in " + Model.Name + " are just like lists in real life; they each store some number of objects. They can hold any number of elements and can be modified at will, so they're very convenient.",
            "You define one like this:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"Apple\", \"Banana\", \"Cherry\"]" + Model.Semicolon,
            }),
            Model.Name + " then knows that your fruit " + Model.ArrayName + " contains three Strings: \"Apple\", \"Banana\", and \"Cherry\".",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"Apple\", \"Banana\", \"Cherry\"]" + Model.Semicolon,
                Model.PrintFunction + "(fruits)" + Model.Semicolon + " " + Model.Commentor + " ['a', 'b', 'c']"
            }),
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 9),
        Title = "Adding to " + Model.ArrayNamePlural,
        Paragraphs = new string[]
        {
            Model.ArrayNamePlural + " all contain a Function named <code>" + Model.AppendFunction + "</code> that adds a value to the end of the " + Model.ArrayName + ". It's actually pretty uncomplicated:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = []" + Model.Semicolon,
                Model.PrintFunction + "(fruits)" + Model.Semicolon + " " + Model.Commentor + " []",
                "",
                "fruits." + Model.AppendFunction + "(\"apple\")" + Model.Semicolon,
                Model.PrintFunction + "(fruits)" + Model.Semicolon + " " + Model.Commentor + " [\"apple\"]" + Model.Semicolon,
            }),
            "In coding, you'll often be asked to make a list of Numbers, such as all numbers in a range, or all squares up to a point. You can do that nicely with a while loop: the following code generates a list of all numbers less than 10, starting with 0.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                Model.VariableDeclare + "i = 0" + Model.Semicolon,
                "",
                "while" + Model.ConditionalLeft + "i < 10" + Model.ConditionalRight,
                "    numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                "    i = i + 1" + Model.Semicolon,
                Model.ConditionalEnd,
                "",
                Model.PrintFunction + "(numbers)" + Model.Semicolon + " " + Model.Commentor + " [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make and print a new " + Model.ArrayName + " containing all numbers between 10 and 20 (including 10 and 20).",
                "Make and print a new " + Model.ArrayName + " containing all odd numbers between 10 and 20."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make and print a new " + Model.ArrayName + " containing all numbers between 10 and 20 (including 10 and 20)." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                    Model.VariableDeclare + "i = 10" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i <= 20" + Model.ConditionalRight,
                    "    numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                    "    i = i + 1" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.PrintFunction + "(numbers)" + Model.Semicolon + " " + Model.Commentor + " [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
                }),
                "Make and print a new " + Model.ArrayName + " containing all odd numbers between 10 and 20." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = []" + Model.Semicolon,
                    Model.VariableDeclare + "i = 11" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i < 20" + Model.ConditionalRight,
                    "    numbers." + Model.AppendFunction + "(i)" + Model.Semicolon,
                    "    i = i + 2" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.PrintFunction + "(numbers)" + Model.Semicolon + " " + Model.Commentor + " [11, 13, 15, 17, 19]"
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 10),
        Title = "Members of " + Model.ArrayNamePlural,
        Paragraphs = new string[]
        {
            "Once you've created your " + Model.ArrayName + ", you can access specific members of it. " + Model.ArrayNamePlural + " know which element is at each \"index\" (location), starting with 0. That means the first element is at index 0, the second is at index 1, and so on. For example:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"apple\", \"banana\", \"cherry\"]" + Model.Semicolon,
                Model.VariableDeclare + "first = fruits[0]" + Model.Semicolon,
                Model.PrintFunction + "(first)" + Model.Semicolon + " " + Model.Commentor + " \"apple\"",
                Model.PrintFunction + "(fruits[1])" + Model.Semicolon + " " + Model.Commentor + " \"banana\""
            }),
            "You can think of index as the distance from that spot in the " +Model.ArrayName + " from the beginning. The first element is 0 away (from itself), the second is 1 away, and so on.",
            Model.ArrayNamePlural + " will complain if you try to access the element at an index that doesn't exist. If your length is 3, for example, the third element is at index [2], so trying to get [3] is like trying to get the fourth element.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"apple\", \"banana\", \"cherry\"]" + Model.Semicolon,
                Model.VariableDeclare + "fruit = fruits[9001]" + Model.Semicolon + " " + Model.Commentor + " " + "This won't work!"
            }),
            "Like with <code>" + Model.LengthName + "</code>, Strings mimic " + Model.ArrayNamePlural + " in that they can also have specific elements accessed. A String can be thought of as its own " + Model.ArrayName + " of characters, so you can access members the same way as in " + Model.ArrayNamePlural + ". You'll just get a String of length 1.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruit = \"apple\"" + Model.Semicolon,
                Model.VariableDeclare + "letter = fruit[0]" + Model.Semicolon,
                Model.PrintFunction + "(letter)" + Model.Semicolon + " " + Model.Commentor + " \"a\"",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " of the names of three of your friends. Print the second name.",
                "Try to print the seventh name in that " + Model.ArrayName + ". Does it work?",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " containing the names of three of your friends. Print the second name." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "names = [\"Mariah\", \"Brandon\", \"Dylan\"]" + Model.Semicolon,
                    Model.PrintFunction + "(names[1])" + Model.Semicolon + " " + Model.Commentor + " \"Brandon\""
                }),
                "Try to print the seventh name in that " + Model.ArrayName + ". Does it work?" + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "names = [\"Mariah\", \"Brandon\", \"Dylan\"]" + Model.Semicolon,
                    Model.PrintFunction + "(names[7])" + Model.Semicolon,
                    Model.Commentor + " It shouldn't work!"
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 11),
        Title = "Loops & " + Model.ArrayNamePlural,
        Paragraphs = new string[]
        {
            "When you have your " + Model.ArrayName + ", you're oftentimes going to want to do something with all members of it. We've already learned how to use loops to do operations multiple times, so we can extend the loop concept to iterate over a given " + Model.ArrayName + ".",
            "In order to do this, we use <code>" + Model.LengthName + "</code>. When used with " + Model.ArrayNamePlural + ", it gives the length of a given " + Model.ArrayName + ". So, if you use it with a defined " + Model.ArrayName + " of three elements, it returns 3.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"Apple\", \"Banana\", \"Cherry\"]" + Model.Semicolon,
                Model.PrintFunction + "(" + Model.UseLength("fruits") + ")" + Model.Semicolon + " " + Model.Commentor + " 3"
            }),
            "We then use <code>" + Model.LengthName + "</code> to write loops over " + Model.ArrayNamePlural + " that iterate for each element in the " + Model.ArrayName + ":",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"Apple\", \"Banana\", \"Cherry\"]" + Model.Semicolon,
                Model.VariableDeclare + "i = 0" + Model.Semicolon,
                "",
                "while" + Model.ConditionalLeft + "i < " + Model.UseLength("fruits") + Model.ConditionalRight,
                "    " + Model.PrintFunction + "(fruits[i])" + Model.Semicolon,
                "    i = i + 1" + Model.Semicolon,
                Model.ConditionalEnd
            }),
            "Remember that <code>" + Model.LengthName + "</code> gives a Number equal to the number of elements in fruits. This loop therefore brings i from 0 to however many elements there are in fruits.",
            "Loops can be used to copy elements from " + Model.ArrayNamePlural + " to somewhere else. This block of code adds all members in its " + Model.ArrayName + " to a String and prints the result:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "fruits = [\"Apple\", \"Banana\", \"Cherry\"]" + Model.Semicolon,
                Model.VariableDeclare + "output = \"Fruits are: \"" + Model.Semicolon,
                Model.VariableDeclare + "i = 0" + Model.Semicolon,
                "",
                "while" + Model.ConditionalLeft + "i < " + Model.UseLength("fruits") + Model.ConditionalRight,
                "    output = output + \" \" + fruits[i]" + Model.Semicolon,
                "    i = i + 1" + Model.Semicolon,
                Model.ConditionalEnd,
                "",
                Model.PrintFunction + "(output)" + Model.Semicolon + " " + Model.Commentor + " \"Fruits are: Apple Banana Cherry\""
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " containing seven numbers. Print each number using a loop.",
                "Make a new " + Model.ArrayName + " containing seven numbers. Use a loop to find the total of them, and print it.",
                "Modify the previous question's code to add every other number.",
                "Make a variable containing your name. Copy each character from that String into a new " + Model.ArrayName + ", and print that " + Model.ArrayName + "."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a new " + Model.ArrayName + " containing seven numbers. Print each number using a loop." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = [1, 2, 3, 4, 5, 6, 7]" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i < " + Model.UseLength("numbers") + Model.ConditionalRight,
                    "    " + Model.PrintFunction + "(numbers[i])" + Model.Semicolon,
                    "    i = i + 1" + Model.Semicolon,
                    Model.ConditionalEnd
                }),
                "Make a new " + Model.ArrayName + " containing seven numbers. Use a loop to find the total of them, and print it." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = [1, 2, 3, 4, 5, 6, 7]" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    Model.VariableDeclare + "total = 0" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i < " + Model.UseLength("numbers") + Model.ConditionalRight,
                    "    total = total + numbers[i]" + Model.Semicolon,
                    "    i = i + 1" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.PrintFunction + "(total)" + Model.Semicolon + " " + Model.Commentor + " 28"
                }),
                "Modify the previous question's code to add every other number." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "numbers = [1, 2, 3, 4, 5, 6, 7]" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    Model.VariableDeclare + "total = 0" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i < " + Model.UseLength("numbers") + Model.ConditionalRight,
                    "    total = total + numbers[i]" + Model.Semicolon,
                    "    i = i + 2" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.PrintFunction + "(total)" + Model.Semicolon + " " + Model.Commentor + " 16"
                }),
                "Make a variable containing your name. Copy each character from that String into a new " + Model.ArrayName + ", and print that " + Model.ArrayName + "." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.VariableDeclare + "name = \"Josh\"" + Model.Semicolon,
                    Model.VariableDeclare + "i = 0" + Model.Semicolon,
                    Model.VariableDeclare + "letters = []" + Model.Semicolon,
                    "",
                    "while" + Model.ConditionalLeft + "i < " + Model.UseLength("name") + Model.ConditionalRight,
                    "    letters." + Model.AppendFunction + "(name[i])" + Model.Semicolon,
                    "    i = i + 1" + Model.Semicolon,
                    Model.ConditionalEnd,
                    "",
                    Model.PrintFunction + "(letters)" + Model.Semicolon + " " + Model.Commentor + " [\"J\", \"o\", \"s\", \"h\"]" + Model.Semicolon
                }),
            })
        }
    });
}