@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 13),
        Title = "Classes",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Paragraphs = new string[]
        {
            "When you're creating objects in programming, you'll oftentimes want to create a lot of the same thing, or variations of a similar thing. For example, you might have a bunch of Objects that each represent a different person:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "josh = {",
                "    \"name\": \"Josh\",",
                "    \"age\": \"21\"",
                "}" + Model.Semicolon,
                Model.VariableDeclare + "mariah = {",
                "    \"name\": \"Mariah\",",
                "    \"age\": \"22\"",
                "}" + Model.Semicolon
            }),
            "Up till now, if you wanted to define Functions that interact with one of the person Objects, you would have them take a person in as a parameter:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.FunctionDefine + "greetPerson(person)" + Model.FunctionRight,
                "    " + Model.CallFunction(Model.PrintFunction, "\"Hello, \" + person.name + \"!\"") + Model.Semicolon,
                Model.FunctionEnd,
                "",
                "greetPerson(Josh)" + Model.Semicolon + " " + Model.Commentor + " \"Hello, Josh!\""
            }),
            "This is all fine and good for small projects, but what about when you have dozens of types of Objects, each of which has dozens of operations that can be done to it? If you keep going in this matter, you'll end up declaring having to declare hundreds of functions of Functions globally. This becomes very hard to maintain, and if two globally defined Functions have the same name, you'll have no way of declaring which one you want to use.",
            Section.WrapHead("Enter Classes"),
            "Most programming languages therefore give us a way to declare a <strong>Class</strong>, which is a statement about a particular type of Object, mainly that it's guaranteed certain member variables, and that there are some Functions it is guaranteed to have as members.",
            "Here's a simple Person class in " + Model.Name + ":",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.ClassStart + "Person" + Model.ConditionalContinueRight,
                "    " + Model.FunctionDefine + Model.ClassMemberFunction(Model.ClassConstructor, new string[] { "name", "age" }),
                "        " + Model.ClassThis + ".name = name" + Model.Semicolon,
                "        " + Model.ClassThis + ".age = age" + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                Model.ClassEnd
            }),
            "The <code>" + Model.ClassConstructor + "</code> Function is what we call a <em>constructor</em>, which is a Function that's run to create an instance of the class.",
            "We use it like this:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.VariableDeclare + "josh = Person(\"Josh\", 21)" + Model.Semicolon,
                Model.VariableDeclare + "mariah = Person(\"Mariah\", 22)" + Model.Semicolon
            }),
            "The <code>" + Model.ClassThis + "</code> refers to the new Person instance that's being created, so all this constructor is doing is taking the given name and age, and assigning them to the Person.",
            "Because the constructor sets the name and age of the Person, you're guaranteed that all Person instances have a name and age. Try making one without - what happens?"
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 14),
        Title = "Member Functions",
        Paragraphs = new string[]
        {
            "The problem from above on having a bagillion globally defined Functions can be solved by declaring <em>member Functions</em> of your Person class:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.ClassStart + "Person" + Model.ConditionalContinueRight,
                "    " + Model.FunctionDefine + Model.ClassMemberFunction(Model.ClassConstructor, new string[] { "name", "age" }),
                "        " + Model.ClassThis + ".name = name" + Model.Semicolon,
                "        " + Model.ClassThis + ".age = age" + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                "",
                "    " + Model.FunctionDefine + Model.ClassMemberFunction("greet"),
                "        " + Model.CallFunction(Model.PrintFunction, "\"Hello, \" + " + Model.ClassThis + ".name + " + "\"!\"") + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                Model.ClassEnd,
                "",
                Model.VariableDeclare + "josh = new Person(\"Josh\", 21)" + Model.Semicolon,
                "josh.greet()" + Model.Semicolon + " " + Model.Commentor + " \"Hello, Josh!\""
            }),
            "Note that member Functions also have to use the <code>" + Model.ClassThis + "</code> to refer to the instance calling the Function.",
            "Every single instance of a Person in your code will be able to call its <code>.greet</code> Function, which is a powerful addon.",
            "Otherwise, member Functions work the exact same way regular Functions do, except that they have a <code>" + Model.ClassThis + "</code> variable pointing to the instance. They can do parameters and return values just lke before.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.ClassStart + "Person" + Model.ConditionalContinueRight,
                "    " + Model.FunctionDefine + Model.ClassMemberFunction(Model.ClassConstructor, new string[] { "name", "age" }),
                "        " + Model.ClassThis + ".name = name" + Model.Semicolon,
                "        " + Model.ClassThis + ".age = age" + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                "",
                "    " + Model.FunctionDefine + Model.ClassMemberFunction("greet"),
                "        " + Model.CallFunction(Model.PrintFunction, "\"Hello, \" + " + Model.ClassThis + ".name + " + "\"!\"") + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                "",
                "    " + Model.FunctionDefine + Model.ClassMemberFunction("isAboveAge", new string[] { "threshold" }),
                "        return" + Model.ClassThis + ".age > threshold" + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                Model.ClassEnd,
                "",
                Model.VariableDeclare + "josh = new Person(\"Josh\", 21)" + Model.Semicolon,
                "josh.greet()" + Model.Semicolon + " " + Model.Commentor + " \"Hello, Josh!\"",
                Model.CallFunction(Model.PrintFunction, "josh.isAboveAge(35)") + Model.Semicolon + " " + Model.Commentor + " " + Model.BooleanFalse
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Create a few instances of the Person class.",
                "Extend the Person class to also take in weight, favorite color, favorite food, and hair color.",
                "Write member Functions for age, name, weight, favorite color, favorite food, and hair color that take in a new value and set the member variable to it.",
                "Nintendo has copyrighted Pokemon, but they're a great example of using classes, so we're instead make a Programon class. It should have a name (String), health maximum, current health amount (both Numbers), and up to two types (a " + Model.ArrayName + " of Strings).",
                "Create a Programove class that stores a name, damage amount, and type.",
                "Modify the Programon class to also store a " + Model.ArrayName + " of Programoves.",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 15),
        Title = "Static Members",
        Paragraphs = new string[]
        {
            "Classes themselves are allowed to have member variables. These are called <em>static</em>, referring to them generally remaining the same (as oppposed to <em>dynamic</em>). They're stored as members of the class itself, so you can access them via the class <em>or</em> instances of the class:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.ClassStart + "Person" + Model.ConditionalContinueRight,
                "    species = \"Human\"",
                "    " + Model.FunctionDefine + Model.ClassMemberFunction(Model.ClassConstructor, new string[] { "name", "age" }),
                "        " + Model.ClassThis + ".name = name" + Model.Semicolon,
                "        " + Model.ClassThis + ".age = age" + Model.Semicolon,
                Model.FunctionEnd == null ? null : "    " + Model.FunctionEnd,
                Model.ClassEnd,
                "",
                Model.CallFunction(Model.PrintFunction, "Person.species") + Model.Semicolon + " " + Model.Commentor + " \"human\"",
                "",
                Model.VariableDeclare + "josh = Person(\"Josh\", 21)" + Model.Semicolon,
                Model.CallFunction(Model.PrintFunction, "josh.species") + Model.Semicolon + " " + Model.Commentor + " \"human\"",
            }),
            "If you want to set a different species for a Person instance, that's fine: it'll create a new member variable for that instance only.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "josh.species = \"alien\"" + Model.Semicolon,
                Model.CallFunction(Model.PrintFunction, "josh.species") + Model.Semicolon + " " + Model.Commentor + " \"alien\"",
                Model.CallFunction(Model.PrintFunction, "Person.species") + Model.Semicolon + " " + Model.Commentor + " \"human\"",
                "",
                "Person.species = \"homo sapien sapien\"" + Model.Semicolon,
                Model.CallFunction(Model.PrintFunction, "josh.species") + Model.Semicolon + " " + Model.Commentor + " \"alien\"",
                Model.CallFunction(Model.PrintFunction, "Person.species") + Model.Semicolon + " " + Model.Commentor + " \"homo sapien sapien\"",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            "We're going to take this Programon idea and run with it.",
            Section.WrapList(new string[]
            {
                "Create a new " + Model.DictionaryName + " as a static member variable of the Progratype class named \"strengths\". It should key <code>\"fire\"</code> to <code>[\"grass\"]</code>, <code>\"grass\"</code> to <code>[\"water\"]</code>, and <code>\"water\"</code> to <code>[\"fire\"]</code> (you can add more if you want).",
                "Also add in \"weaknesses\" as the reverse of strengths.",
                "Create a regular member Function of the Progratype class that takes in a Programon and determines how much damage it would do to it. For each type of the other Programon, the Progratype's damage is doubled if it's strong against that type, or halved if it's weak against that type."
            })
        }
    });
}
