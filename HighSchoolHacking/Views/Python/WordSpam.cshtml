@using HighSchoolHacking.Models

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Languages.Python.Color, 5),
        Title = "Word Spam",
        Extension = "python",
        Large = true,
        Back = "/Python",
        Paragraphs = new string[]
        {
            "Security is a big part of coding. Hacking and hackers are everywhere on the internet, so it's very important people and organizations keep their data secure.",
            "This exercise teaches you how to encode a small message inside a very large text file and read similar text files to find encoded messages."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Languages.Python.Color, 6),
        Title = "Randomization",
        Paragraphs = new string[] 
        {
            "First, lets learn about how to make random numbers. Python comes with a <em>module</em> called <code>random</code>. A module is a set of tools that you can opt into that add features to the language. To use random, we have to <em>import</em> it:",
            Section.WrapCode("python", new string[]
            {
                "import random"
            }),
            "This means you now have access to an object called <code>random</code>. It has a <code>.random()</code> Function that returns a number between 0 and 1, at random.",
            Section.WrapCode("python", new string[]
            {
                "import random",
                "",
                "print(random.random()); # 0.22834192538721...",
                "print(random.random()); # 0.92835109283528...",
                "print(random.random()); # 0.57238572107582...",
                "print(random.random()); # 0.87917253987238...",
                "print(random.random()); # 0.29837198273859...",
                "print(random.random()); # 0.42983075123758...",
            }),
            Section.WrapHead("Random Integers"),
            "In your code, you'll probably want to generate actual integers, not fancy decimals. You can do this using fancy multiplication and rounding logic given by the <code>math</code> module. Among other things, it has the <code>floor()</code> Function, which takes in a number and returns it rounded down to the nearest Integer.",
            Section.WrapCode("python", new string[]
            {
                "import random",
                "import math",
                "",
                "print(math.floor(3.14)); # 3"
            }),
            "We'll explain in more detail later, but here's how you generate either 0 or 1 with 50% probability for each:",
            Section.WrapCode("python", new string[]
            {
                "number = math.floor(random.random() * 2); # Either 0 or 1"
            }),
            "This works: <code>random.random() * 2</code> turns the random number between 0 and 1 into a random number between 0 and 2 (<code>0 * 2 = 0</code>; <code>.5 * 2 = 1</code>; <code>.999... * 2 = 1.999...</code>), which is then rounded down.",
            "The same logic applies to generating a random number in any range. Multiplying the random by 7, for example, means you would get a number from 0 to 6, because <code>.999 * 7 = 6.999</code>, which rounds down to 6.",
            Section.WrapHead("Shuffle"),
            "The <code>random</code> module also has a great Function called <code>shuffle</code>, which takes in a List and shuffles it, making the contents be in a random order.",
            Section.WrapCode("python", new string[]
            {
                "import random",
                "words = [\"every\", \"day\", \"I'm\", \"shuffling\"]",
                "",
                "random.shuffle(words)",
                "print(words) # [\"shuffling\", \"I'm\", \"every\", \"day\"]"
            }),
            "Every time you call <code>random.shuffle(words)</code>, <code>words</code> has a different order."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[] 
        { 
            Section.WrapList(new string[]
            {
                "Make a Function that returns a random number between 0 and 3, inclusive.",
                "Make a Function that takes in a Number and returns a random Number between 0 and it, inclusive.",
                "Make a Function that takes in two Numbers and returns a random Number between the two, inclusive.",
                "Create a List and add a random amount of <code>7</code>s to it, between 5 and 15, inclusive.<br /><em>Hint: you can use <code>int(7.0) to convert 7.0 to 7</code></em>",
                "Modify that code to have each Number in the List be a random Number no bigger than its index (so the first slot is <=0, the second is <=1, the third <=2, and so on).",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[] 
        { 
            Section.WrapList(new string[]
            {
                "Make a Function that returns a random number between 0 and 3, inclusive." + Section.WrapCode("python", new string[]
                {
                    "import random",
                    "import math",
                    "",
                    "def generateRandom():",
                    "    return math.floor(random.random() * 4)",
                    "",
                    "print(generateRandom())"
                }),
                "Make a Function that takes in a Number and returns a random Number between 0 and it, inclusive." + Section.WrapCode("python", new string[]
                {
                    "import random",
                    "import math",
                    "",
                    "def generateRandom(max):",
                    "    return math.floor(random.random() * (max + 1))",
                    "",
                    "print(generateRandom(7))"
                }),
                "Make a Function that takes in two Numbers and returns a random Number between the two, inclusive." + Section.WrapCode("python", new string[]
                {
                    "import random",
                    "import math",
                    "",
                    "def generateRandom(min, max):",
                    "    return math.floor(random.random() * (max - min + 1)) + min",
                    "",
                    "print(generateRandom(3, 7))"
                }),
                "Create a List and add a random amount of <code>7</code>s to it, between 5 and 15, inclusive." + Section.WrapCode("python", new string[]
                {
                    "import random",
                    "import math",
                    "",
                    "def generateRandom(min, max):",
                    "    return math.floor(random.random() * (max - min + 1)) + min",
                    "",
                    "numbers = []",
                    "for x in range(int(generateRandom(5, 15))):",
                    "    numbers.append(7)",
                    "   ",
                    "print(numbers)"
                    
                }),
                "Modify that code to have each Number in the List be a random Number no bigger than its index (so the first slot is <=0, the second is <=1, the third <=2, and so on)." + Section.WrapCode("python", new string[]
                {
                    "import random",
                    "import math",
                    "",
                    "def generateRandom(min, max):",
                    "    return math.floor(random.random() * (max - min + 1)) + min",
                    "",
                    "numbers = []",
                    "for x in range(int(generateRandom(5, 15))):",
                    "    numbers.append(int(generateRandom(0, x)))",
                    "   ",
                    "print(numbers)"
                }),
            })
        }
    });
    
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Languages.Python.Color, 7),
        Title = "Encoding",
        Paragraphs = new string[] 
        {
            "Now that you know how to generate random Numbers and shuffle Lists, we can do the point of the activity, which is to encode a small message inside a very large text file and read similar text files to find encoded messages.",
            "Encoding is the act of taking some data and turning it into a different form. This oftentimes (but not always) means turning it into a form other people won't be able to read. If you've ever heard NCIS use the phrase \"securely encoded,\" that's what they mean.",
            "The algorithm we're taking is as follows:",
            Section.WrapList(new string[]
            {
                "Create a List of unique words you want to put in the message.",
                "For each String in that list, add X copies of it to the list, where..." + Section.WrapList(false, new string[]
                {
                    "X = 7 times its index plus two (so the first one is added 14 times, the second 21 times, the third 28, and so on)."
                }),
                "Given a List of random words from the dictionary, add N of these words Y times each, where..." + Section.WrapList(false, new string[]
                {
                    "N = a random number between 3 and 7, inclusive, times the number of words in your message",
                    "Y = a random number between 1 and 6, inclusive (different every time)"
                }),
                "Shuffle the List."
            }),
            "At the end of the algorithm, you'll have a shuffled list of what appears to be completely random words, but we know they're not all random! The most common words are the ones in your message, and are in order of where they appear in your message."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Do parts 1 and 2 of the algorithm.",
                "Write code to read the linked ospd.txt (Official Scrabble Player's Dictionary, minus vulgarities) into a List of Strings, where each String is a different word.",
                "Use that List to do part 3 of the algorithm.",
                "Do part 4 of the algorithm.",
                "Write the resultant List to a file, such that each String in the List is on its own line."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Languages.Python.Color, 8),
        Title = "Decoding",
        Paragraphs = new string[] 
        {
            "<em>in progress!</em>"
        }
    });
}