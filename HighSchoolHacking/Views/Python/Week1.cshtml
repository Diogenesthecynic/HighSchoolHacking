@using HighSchoolHacking.Models

@{
    Html.RenderPartial("~/Views/Templating/Section.cshtml", new Section
    {
        Color = "purple",
        Title = "Python: Week 1",
        Paragraphs = new string[] {
            "We're going to spend the first few lessons getting you used to working in Python. It's a bit different (and a lot simpler) than Java, so you want to get used to the syntax.",
            "Start by going to repl.it/languages/python. This is a 'shell' where you can enter Python on the left, hit the play button (or Ctrl + Enter) to make it run, and view output on the right.",
            "To start, enter the following code on the left side of the screen:",
            Section.WrapCode("python", "print(\"Hello world!\")"),
            "You should see a <em>Hello world!</em> appear on the right side of the screen. If you did, great! If not, remember to play the code using the button or shortcut.",
            "If you already know how to code, just skim the rest of this section.",
            "<h3>Examples</h3>",
            Section.WrapList(true, new string[] {
                "Instead of printing <em>Hello world</em>, print out your full name."
            })
        },
        Large = true
    });

    Html.RenderPartial("~/Views/Templating/Section.cshtml", new Section
    {
        Color = "blue",
        Title = "Variables",
        Paragraphs = new string[] {
            "In code, a 'variable' stores value. Variables are called by their name, which is how you can set the value, get the value, and change the value.",
            "For example, in the code below we're manipulating the 'foo' variable and printing it.",
            Section.WrapCode("python", new string[] {
                "foo = \"Hello world!\"",
                "print(foo)"
            }),
            "Be really careful when writing variable names! Can you spot the problem in the following code example? You might think it's obvious, but when you write code, variable name typos are ridiculously common.",
            Section.WrapCode("python", new string[] {
                "foo = \"Hello world!\"",
                "print(fooo)"
            }),
            "<h3>Examples</h3>",
            Section.WrapList(true, new string[] {
                "Instead of storing <em>Hello world</em>, store your full name and print it.",
                "Try a few different variable names other than foo. Try some weird ones too: can you find a few things that make a name invalid?"
            })
        }
    });

    Html.RenderPartial("~/Views/Templating/Section.cshtml", new Section
    {
        Color = "green",
        Title = "Comments",
        Paragraphs = new string[] {
            "For the rest of the lessons, we're going to be using a feature called 'comments' in code. Comments do literally nothing: they're just there to help explain code. They're glorified footnotes that can be very helpful.",
            Section.WrapCode("python", new string[] {
                "foo = \"Hello world!\"",
                "print(foo) # If all goes well, this should output 'Hello World!'"
            }),
            Section.WrapCode("python", new string[] {
                "foo = \"Hello world!\"",
                "print(fooo) # NameError: name 'fooo' is not defined"
            }),
            "You put comments with a (pound sign) # before them. We'll expect you to do this around complicated blocks of code, since in later lessons it can be hard to understand your code without you commenting it."
        }
    });

    Html.RenderPartial("~/Views/Templating/Section.cshtml", new Section
    {
        Color = "orange",
        Title = "Strings",
        Paragraphs = new string[] {
            "In Python, a 'String' is a bunch of characters (a character is a letter, number, or symbol). To create a String in Python, put whatever characters you want between two quotes. It doesn't matter if they're single ' or double \"; they just have to be the same.",
            "That's what happened when you wrote <code>\"Hello world!\"</code> above: Python knew everything between the quotes was a String.",
            Section.WrapCode("python", new string[] {
                "foo = \"Hello world!\"",
                "print(foo) # Hello World!",
                "foo = 'Hello world!'",
                "print(foo) # Hello World!"
            }),
            "<h3>Concatenating Strings</h3>",
            "<em>concatenate [<code>kənˈkatnˌāt</code>] - to link together; unite in a series or chain.</em>",
            "You can concatenate (combine) Strings in Python really easily. It's like attaching one string of yarn to another string of yarn, you just get one bigger string.",
            Section.WrapCode("python", new string[] {
                "print(\"Hello \" + \" world!\"); # Hello world!",
            }),
            Section.WrapCode("python", new string[] {
                "part_one = \"Hello\"",
                "part_two = \"world\"",
                "combined = part_one + \" \" + part_two",
                "print(combined + \"!\") # Hello world!"
            }),
            "<h3>Examples</h3>",
            Section.WrapList(true, new string[] {
                "Store your first name, your middle name (if you have one), and your last name in variables. Make a new variable with them all together.",
                "Print your full name in a variable and print it plus the String <code>\" likes coding!\"</code>. Print someone else's name plus the String <code>\" likes coding!\"</code>."
            })
        }
    });
}