@using HighSchoolHacking.Models

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "green",
        Title = "Lists",
        Extension = "python",
        Large = true,
        Back = "/Python/Learn",
        Paragraphs = new string[]
        {
            "A List in Python is just like a list in real life; it stores some number of objects. They can hold any number of elements and can be modified at will, so they're very convenient.",
            "You define a list like this:",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"Apple\", \"Banana\", \"Cherry\"]",
            }),
            "Python then knows that your fruit variable is a List containing three items: \"Apple\", \"Banana\", and \"Cherry\". It also knows that the list has a length of 3 (for three items).",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"Apple\", \"Banana\", \"Cherry\"]",
                "print(fruits) # ['a', 'b', 'c']",
                "print(fruits.length) # 3"
            }),
            "That last line is how you access a \"property\" of something in Python. We won't go deep into that, but know that every List has a length property. Strings also happen to have this property (you can really think of a String as a List of characters!).",
            Section.WrapCode("python", new string[]
            {
                "[\"Apple\", \"Banana\", \"Cherry\"].length # 3",
                "\"Dragonberry\".length # 11"
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "orange",
        Title = "Adding to Lists",
        Paragraphs = new string[]
        {
            "Some object properties are actually something called a \"Function\". We go over those in a few lessons, but in general all you need to know is that they take in some variable(s) the same way as <code>print</code>, and then do something with it.",
            "Lists all have an \"append\" function that adds a value to the end of the list. It's actually pretty uncomplicated:",
            Section.WrapCode("python", new string[]
            {
                "fruits = []",
                "print(fruits) # []",
                "print(fruits.length) # 0",
                "",
                "fruits.append(\"apple\")",
                "print(fruits) # [\"apple\"]",
                "print(fruits.length) # 1"
            }),
            "In coding, you'll often be asked to make a list of Numbers, such as all numbers in a range, or all squares up to a point. You can do that nicely with a while loop: the following code generates a list of all numbers less than 10, starting with 0.",
            Section.WrapCode("python", new string[]
            {
                "numbers = []",
                "i = 0",
                "while i < 10:",
                "    numbers.append(i)",
                "    i = i + 1",
                "print(numbers) # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make and print a list containing all numbers between 10 and 20 (including 10 and 20).",
                "Make and print a list containing all odd numbers between 10 and 20."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make and print a list containing all numbers between 10 and 20 (including 10 and 20)." + Section.WrapCode("python", new string[]
                {
                    "numbers = []",
                    "i = 10",
                    "while i <= 20:",
                    "    numbers.append(i)",
                    "    i = i + 1",
                    "print(numbers) # [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
                }),
                "Make and print a list containing all odd numbers between 10 and 20." + Section.WrapCode("python", new string[]
                {
                    "numbers = []",
                    "i = 11",
                    "while i < 20:",
                    "    numbers.append(i)",
                    "    i = i + 2",
                    "print(numbers) # [11, 13, 15, 17, 19]"
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "red",
        Title = "Members of a List",
        Paragraphs = new string[]
        {
            "Once you've created a list, you can access specific members of it. Lists know which element is at each \"index\" (location), starting with 0. Yes, the first element is at index 0, the second at index 1, and so on. For example:",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"apple\", \"banana\", \"cherry\"]",
                "first = fruits[0]",
                "print(first) # \"apple\"",
                "print(fruits[1]) # \"banana\""
            }),
            "You can think of index as the distance from that spot in the List from the beginning. The first element is 0 away (from itself), the second is 1 away, and so on.",
            "Lists will complain if you try to access the element at an index that doesn't exist. If your length is 3, for example, the third element is at index [2], so trying to get [3] is like trying to get the fourth element.",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"apple\", \"banana\", \"cherry\"]",
                "fruit = fruits[9001] # IndexError: list index out of range"
            }),
            "Like with the append property, Strings mimic Lists in that they can also have specific elements accessed. Again, a String is similar to a List of characters, so you can access members the same way as a List. You'll just get a String of length 1.",
            Section.WrapCode("python", new string[]
            {
                "fruit = \"apple\"",
                "letter = fruit[0]",
                "print(letter) # \"a\"",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a List containing the names of three of your friends. Print the second name.",
                "Try to print the seventh name in that list. Does it work?",
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a List containing the names of three of your friends. Print the second name." + Section.WrapCode("python", new string[]
                {
                    "names = [\"Mariah\", \"Brandon\", \"Dylan\"]",
                    "print(names[1]) # \"Brandon\""
                }),
                "Try to print the seventh name in that list. Does it work?" + Section.WrapCode("python", new string[]
                {
                    "names = [\"Mariah\", \"Brandon\", \"Dylan\"]",
                    "print(names[7]) # IndexError: list index out of range",
                    "# It didn't work!"
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "purple",
        Title = "Loops & Lists",
        Paragraphs = new string[]
        {
            "When you have a list, you're oftentimes going to want to do something with all members of it. We've already learned how to use loops to do operations multiple times, so we can extend the loop concept to iterate over a List.",
            "In order to do this, we use <code>len</code>. This is another function like <code>print</code>, but instead of printing what it's given to the screen, it gets the length of the object. So, if you give it a List of three elements, it returns 3.",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"Apple\", \"Banana\", \"Cherry\"]",
                "print(len(fruits)) # 3"
            }),
            "We then use <code>len</code> to write loops over Lists that iterate for each element in the List:",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"Apple\", \"Banana\", \"Cherry\"]",
                "i = 0",
                "",
                "while i < len(fruits):",
                "    print(fruits[i])",
                "    i = i + 1"
            }),
            "Remember that len(fruits) gives a Number equal to the number of elements in fruits. This loop therefore brings i from 0 to however many elements there are in fruits.",
            "Loops can be used to copy elements from a List to somewhere else. This block of code adds all the members in a List to a String and prints the resut:",
            Section.WrapCode("python", new string[]
            {
                "fruits = [\"Apple\", \"Banana\", \"Cherry\"]",
                "output = \"Fruits are: \"",
                "i = 0",
                "",
                "while i < len(fruits):",
                "    output = output + \" \" + fruits[i]",
                "    i = i + 1",
                "",
                "print(output) # \"Fruits are: Apple Banana Cherry\""
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a List containing seven numbers. Print each number using a loop.",
                "Make a List containing seven numbers. Use a loop to add those numbers to a String, and print the String.",
                "Modify the previous question's code to add every other name.",
                "Make a variable containing your name. Copy each character from that String into a List, and print the List."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make a List containing seven numbers. Print each number using a loop." + Section.WrapCode("python", new string[]
                {
                    "numbers = [0, 1, 2, 3, 4, 5, 6]",
                    "i = 0",
                    "",
                    "while i < len(numbers):",
                    "    print(i)",
                    "    i = i + 1",
                }),
                "Make a List containing seven numbers. Use a loop to add those numbers to a String, and print the String." + Section.WrapCode("python", new string[]
                {
                    "numbers = [0, 1, 2, 3, 4, 5, 6]",
                    "i = 0",
                    "output = \"Numbers: \"",
                    "",
                    "while i < len(numbers):",
                    "    output = output + i",
                    "    i = i + 1",
                    "",
                    "print(output) # Numbers: 0 1 2 3 4 5 6 7"
                }),
                "Modify the previous question's code to add every other number." + Section.WrapCode("python", new string[]
                {
                    "numbers = [0, 1, 2, 3, 4, 5, 6]",
                    "i = 0",
                    "output = \"\"",
                    "",
                    "while i < len(numbers):",
                    "    output = output + i",
                    "    i = i + 2",
                    "",
                    "print(output) # Numbers: 0 2 4 6"
                }),
                "Make a variable containing your name. Copy each character from that String into a List, and print the List." + Section.WrapCode("python", new string[]
                {
                    "name = \"Josh\"",
                    "i = 0",
                    "letters = []",
                    "",
                    "while i < name.length:",
                    "    letters.append(name[i])",
                    "    i = i + 1",
                    "",
                    "print(letters) # [\"J\" \"o\" \"s\" \"h\"]"
                }),
            })
        }
    });
}