@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 11),
        Title = "Functions",
        Extension = Model.NameLower,
        Back = "/" + Model.Name + "/Learn",
        Large = true,
        Paragraphs = new string[]
        {
            "Functions in " + Model.Name + " are very similar to Functions in Java and C++. Each one has three parts:",
            Section.WrapList(new string[]
            {
                "Return type - Either a class, which it will return an instance of, or <code>void</code> meaning nothing.",
                "Name - The name of the Function.",
                "Parameters - The declaration of what objects are to be passed into the Function when used, if any."
            }),
            "General " + Model.Name + " Functions follow this syntax:",
            Section.WrapCode("text", new string[]
            {
                "<return type> <function-name>(<parameters>) {",
                "    <code>",
                "}"
            }),
            "For the ones we use in our Program class, we add the <code>static</code> keyword in front of all that. <code>static</code> means it's a member Function of the class itself, <em>not</em> instances of the class. Because the <code>Main</code> Function is static, it can't call non-<code>static</code> member Functions of Program (this is because non-<code>static</code> Functions require an instance of the class to call them, and we haven't made any).",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        // \"Hello, Josh.\"",
                "        " + Model.CallFunction("sayHello", "\"Josh\"") + Model.Semicolon,
                "    }",
                "    ",
                "    static void sayHello(string name) {",
                "        " + Model.CallFunction(Model.PrintFunction, "\"Hello, {0}.\"", "name") + Model.Semicolon,
                Model.End
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 12),
        Title = "Parameter Shenanigans",
        Paragraphs = new string[]
        {
            "Parameters in " + Model.Name + " Functions are flexible. Very flexible. <a href='https://msdn.microsoft.com/en-us/library/dd264739.aspx'>MSDN documentation</a> lists more information on them, but here are some of the major features.",
            Section.WrapHead("Default Parameters"),
            Model.Name + " supports default parameters on Functions. If you haven't seen them already, having default parameters is when you declare a parameter for a Function, and a default value to set it to if it's not given. That means the user can call the Function with or without providing an argument for that parameter, and when they don't, the program pretends they gave the default value instead.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        // \"Hello, anonymous.\"",
                "        " + Model.CallFunction("sayHello") + Model.Semicolon,
                "    }",
                "    ",
                "    static void sayHello(string name = \"anonymous\") {",
                "        " + Model.CallFunction(Model.PrintFunction, "\"Hello, {0}.\"", "name") + Model.Semicolon,
                Model.End
            }),
            "Note that after the first parameter with a default value, you can't have any more parameters without default values. " + Model.Name + " needs to know the ones that start it, so it doesn't become unclear which parameters the user isn't supplying arguments for.",
            Section.WrapHead("Named Parameters"),
            "Sometimes, you don't know what order to pass arguments into a Function or which ones do what.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "// What does this do, and how do you remember all this!?",
                @"processFile(""C:/Users/Josh/text.txt"", ""www.highschoolhacking.club"", ""ASCII"", ""de"");",
                
            }),
            "Fortunately, if you know the names of a Function's parameters, you can directly name them in calling the Function, so the order doesn't matter.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        " + Model.CallFunction("processFile", @"file: ""C:/Users/Josh/text.txt""", @"url: ""www.highschoolhacking.club""") + Model.Semicolon,
                "    }",
                "    ",
                "    static void processFile(string file, string url, string encoding = \"UTF-8\", string locale = \"de\") {",
                "        // Do whatever here...",
                Model.End
            }),
            "You can also start off with passing arguments regularly, then start naming them whenever you want (but you can't start naming arguments, then stop):",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "// Good",
                @"processFile(""C:/Users/Josh/text.txt"", site: ""www.highschoolhacking.club"");",
                "",
                "// Bad",
                @"// processFile(file: ""C:/Users/Josh/text.txt"", ""www.highschoolhacking.club"");"
            })
        }
    });

    Html.RenderPartial(Section.SwitcherFile, new KeyValuePair<string, string>(Model.Name, "Functions"));
}