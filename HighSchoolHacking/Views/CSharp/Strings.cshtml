@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 4),
        Title = "Strings",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Paragraphs = new string[]
        {
            Model.Name + " Strings are flexible. Like, really flexible.",
            "To start, they support all the regular features you'd expect from normal Strings.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        string x = \"Hello\";",
                "        x += \" \" + \"world\" + \"!\";",
                "        " + Model.CallFunction(Model.PrintFunction, "x") + "; // \"Hello world!\"",
                Model.End
            }),
            "The rest of this lesson takes liberally from an MSDN (Microsoft Developer Network) <a href='https://msdn.microsoft.com/en-us/library/ms228362.aspx'>article on Strings</a>.",
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 5),
        Title = "Immutability",
        Paragraphs = new string[]
        {
            "Like a lot of other languages such as JavaScript and Python, " + Model.Name + "'s Strings are <em>immutable</em>: they can't be changed after their creation. All of the String methods and operators that appear to modify a String actually return the results in a new String.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        string y = \"Hello\";",
                "        string z = y;",
                "        y += \" \" + \"world\" + \"!\";",
                "        " + Model.CallFunction(Model.PrintFunction, "z") + "; // \"Hello\"",
                Model.End
            }),
            "Run that example and you'll see it just prints \"Hello\". That's because <code>z</code> points to the original \"Hello\" that <code>y</code> <em>used</em> to point to until it was set to the result of adding some more Strings to that."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 6),
        Title = "String Literals",
        Paragraphs = new string[]
        {
            "If you did our Python lessons with File I/O, you might already know that <code>\\n</code> is the character for a newline (enter). If you didn't, <code>\\n</code> is the character for a newline (enter). There you go.",
            "<code>\\n</code> is something called an <em>escape character</em>. Escape characters are how you can put special and/or otherwise unusable characters in your Strings:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        " + Model.CallFunction(Model.PrintFunction, "\"The \\\"\\u00C6olean Harp\\\"\\n\\tby Samuel Taylor Coleridge\"") + ";",
                "        /*",
                "         \"\"The Æolean Harp\"",
                "              by Samuel Taylor Coleridge\"",
                "         */",
                Model.End
            }),
            "<em>Some online " + Model.Name + " won't display the special characters correctly, or display them as '?'s.</em>",
            Section.WrapHead("Verbatim Strings"),
            Model.Name + " also has support for directly placing those characters in Strings via the <code>@</code> symbol before the String:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        string quote = @\"Luis: \"\"Patrick, where did you get that overnight bag?\"\"",
                "Patrick: \"\"Jean Paul Gaultier.\"\"\";",
                "",
                "        " + Model.CallFunction(Model.PrintFunction, "quote") + ";",
                "        /*",
                "         Luis: \"Patrick, where did you get that overnight bag?\"",
                "         Patrick: \"Jean Paul Gaultier.\"",
                "         */",
                Model.End
            }),
            "Everything inside the parenthesis was kept, including the newlines. Quotes were dealt with by putting two of them next to each other, instead of with a backslash.",
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[] 
        { 
            Section.WrapList(new string[]
            {
                "Print a regular String (not a verbatim one) that contains both single ' and double \" quotes.",
                "Print the same String as a verbatim one.",
                "Use at least three of the escape strings from the <a href='https://msdn.microsoft.com/en-us/library/ms228362.aspx'>Strings article</a>'s table."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[] 
        { 
            Section.WrapList(new string[]
            {
                "Print a regular String (not a verbatim one) that contains both single ' and double \" quotes." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        " + Model.CallFunction(Model.PrintFunction, "\"\\\"What's your name?\\\", we asked.\"") + Model.Semicolon,
                    Model.End
                }),
                "Print the same String as a verbatim one." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        " + Model.CallFunction(Model.PrintFunction, "@\"\"\"What's your name?\"\", we asked.\"") + Model.Semicolon,
                    Model.End
                }),
                "Use a String with at least three of the escape Strings from the <a href='https://msdn.microsoft.com/en-us/library/ms228362.aspx'>Strings article</a>'s table." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        " + Model.CallFunction(Model.PrintFunction, "\"I\\'m falling\\ndown...\\t and \\\\deleting things...\"") + Model.Semicolon,
                    Model.End
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 7),
        Title = "Format Strings",
        Paragraphs = new string[]
        {
            "Oftentimes when using Strings, you want to add other things inside them. You can concatenate Strings, but that gets messy. " + Model.Name + " allows you to mark in a String where things should go, <em>then</em> show them:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "System.String.Format(\"{0} * {1} = {2}\", 2, 3, 6); // \"2 * 3 = 6\""
            }),
            "That code snippet takes in the string with <code>{<em>#</em>}</code> annotations and a bunch of other arguments. The arguments are inserted in order: the first argument replaces <code>{0}</code>, the second replaces <code>{1}</code>, and so on.",
            "Incidentally, System.Console.WriteLine also allows you to pass in a format String with arguments after it.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        System.Console.WriteLine(\"{0} * {1} = {2}\", 2, 3, 6); // \"2 * 3 = 6\"",
                Model.End
            }),
            "To make it easier for yourself, you can include the <code>System</code> namespace, which contains the formal <code>String</code> class. Strings are a built-in part of the " + Model.Name + " runtime, but some fancier parts of them are stored in the class.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "using System;",
                "",
                Model.Start,
                "        string x = String.Format(\"{0} * {1} = {2}\", 2, 3, 6);",
                "        Console.WriteLine(x);",
                Model.End
            }),
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Create a String containing your first, middle (if you have one), and last name as format arguments using <code>String.Format</code>. Print it.",
                "Directly print the above String using <code>Console.WriteLine</code>."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Create a String containing your first, middle (if you have one), and last name as format arguments using <code>String.Format</code>. Print it." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "using System;",
                    "",
                    Model.Start,
                    "        string name = String.Format(\"{0} {1} {2}\", \"Joshua\", \"Kevin\", \"Goldberg\");",
                    "        " + Model.CallFunction(Model.PrintFunction, "name") + Model.Semicolon,
                    Model.End
                }),
                "Directly print the above String using <code>Console.WriteLine</code>." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "using System;",
                    "",
                    Model.Start,
                    "        " + Model.CallFunction(Model.PrintFunction, "\"{0} {1} {2}\", \"Joshua\", \"Kevin\", \"Goldberg\"") + Model.Semicolon,
                    Model.End
                })
            })
        }
    });

    Html.RenderPartial(Section.SwitcherFile, new KeyValuePair<string, string>(Model.Name, "Strings"));
}