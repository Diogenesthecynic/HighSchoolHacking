@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 12),
        Title = "Delegates",
        Extension = Model.NameLower,
        Back = "/" + Model.Name + "/Learn",
        Large = true,
        Paragraphs = new string[]
        {
            "Virtually all programming languages allow you to pass Functions as parameters to other Functions. This is an extremely powerful concept that a lot of both ancient and modern languages embrace.",
            "Some languages, like JavaScript, have \"first class Functions\", which allows you to treat them like any other object:",
            Section.WrapCode("javascript", new string[]
            {
                "var sorter = function (a, b) {",
                "    return b - a;",
                "};",
                "",
                "var numbers = [117, 3, 7, 96];",
                "",
                "numbers.sort(sorter);",
                "",
                "console.log(numbers); // [3, 7, 96, 117]"
            }),
            "You don't really need to know JavaScript to understand what's going on there.",
            "Other languages, like C++, treat Functions as places in memory (which is actually what they are), so the equivalent there is passing the memory address of the Function.",
            Section.WrapCode("c++", new string[]
            {
                "#include <algorithm>",
                "#include <iostream>",
                "#include <vector>",
                "",
                "bool myfunction (int i, int j) {",
                "    return i < j;",
                "}",
                "",
                "int main(int argc, char* argv[]) {",
                "    int myints[] = { 117, 3, 7, 96 };",
                "    std::vector<int> myvector(myints, myints + 4);",
                "    ",
                "    std::sort(myvector.begin(), myvector.end(), myfunction);",
                "    ",
                "    // 3, 7, 96, 117",
                "    for (std::vector<int>::iterator it = myvector.begin(); it != myvector.end(); ++it)",
                "        std::cout << ' ' << *it;",
                "    }",
                "    std::cout << std::endl;",
                "    ",
                "    return 0;",
                "}"
            }),
            "As before, you don't need to know C++ to understand generally that this code sorts a listing of integers.",
            Section.WrapHead("Enter Delegates"),
            "JavaScript's way of referring to Functions as variables is more flexible, but it doesn't have any sort of type checking (you can pass whatever you want). C++ has type checking, but is harder to use most of the time.",
            Model.Name + " takes an approach closer to C++'s, but with type checking. In it, you have <em>delegates</em>, which are named declarations of what a Function should look like. The following delegate declares a Function that takes in a String:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "public delegate void MyDelegate(string message);"
            }),
            "You can then use <code>MyDelegate</code> as if it were a class of variable, where the value must be a Function matching the declaration.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "class Program",
                "{",
                "    public delegate void MyDelegate(string message);",
                "    ",
                "    static void Main()",
                "    {",
                "        MyDelegate handler = SayString;",
                "        ",
                "        // Prints \"Hello World!\"",
                "        handler(\"Hello World!\");",
                "    }",
                "    ",
                "    public static void SayString(string message)",
                "    {",
                "        " + Model.CallFunction(Model.PrintFunction, "message") + Model.Semicolon,
                Model.End,
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 13),
        Title = "Using Delegates",
        Paragraphs = new string[]
        {
            "Once you've declared a delegate type, you can have your own Functions take in delegates for use. Take this code snippet, for example, that applies a math operation to a number:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "class Program",
                "{",
                "    public delegate int MathFunction(int x, int y);",
                "    ",
                "    static void Main()",
                "    {",
                "        DoMath(14, 7, Add); // Result is 21.",
                "        DoMath(14, 7, Subtract); // Result is 7.",
                "    }",
                "    ",
                "    public static int Add(int x, int y)",
                "    {",
                "        return x + y;",
                "    }",
                "    ",
                "    public static int Subtract(int x, int y)",
                "    {",
                "        return x - y;",
                "    }",
                "    ",
                "    public static void DoMath(int x, int y, MathFunction stuff)",
                "    {",
                "        " + Model.CallFunction(Model.PrintFunction, "\"Result is {0}.\"", "stuff(x, y)") + Model.Semicolon,
                Model.End,
            }),
            Model.Name + " wants you to treat delegates as regular variables (<code>MathFunction stuff</code> is passed the same way as <code>int x</code> and <code>int y</code>), so they themselves can be passd to other delegates.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "class Program",
                "{",
                "    public delegate void MathApplier(int x, int y, MathFunction stuff);",
                "    public delegate int MathFunction(int x, int y);",
                "    ",
                "    static void Main()",
                "    {",
                "        // Result is 21.",
                "        // Result is 7.",
                "        // Result is 21.",
                "        DoMultipleMath(14, 7, new MathFunction[] { Add, Subtract, Add }, DoMath);",
                "    }",
                "    ",
                "    public static int Add(int x, int y)",
                "    {",
                "        return x + y;",
                "    }",
                "    ",
                "    public static int Subtract(int x, int y)",
                "    {",
                "        return x - y;",
                "    }",
                "    ",
                "    // For each provided MathFunction in functions, runs the applier with it and the two numbers",
                "    public static void DoMultipleMath(int x, int y, MathFunction[] functions, MathApplier applier)",
                "    {",
                "        foreach (MathFunction function in functions)",
                "        {",
                "            applier(x, y, function);",
                "        }",
                "    }",
                "    ",
                "    public static void DoMath(int x, int y, MathFunction stuff)",
                "    {",
                "        " + Model.CallFunction(Model.PrintFunction, "\"Result is {0}.\"", "stuff(x, y)") + Model.Semicolon,
                Model.End,
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Add <code>Multiply</code> and <code>Divide</code> to the second math example.",
                "Create a delegate that takes in two Strings and returns an int. Write one Function that returns their total Length, and another that returns their difference.",
                "The templated <a href='https://msdn.microsoft.com/en-us/library/bzw8611x(v=vs.110).aspx'>System.Array.Sort</a> takes in an Array of any type, and optionally a Function that takes in two objects of that type and returns their difference (<code>y - x</code>, if given <code>(int x, int y)</code>). Create a Function that sorts Strings on their length, and sort an Array with it."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Add <code>Multiply</code> and <code>Divide</code> to the second math example." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "class Program",
                    "{",
                    "    public delegate void MathApplier(int x, int y, MathFunction stuff);",
                    "    public delegate int MathFunction(int x, int y);",
                    "    ",
                    "    static void Main()",
                    "    {",
                    "        // Result is 21.",
                    "        // Result is 7.",
                    "        // Result is 98.",
                    "        // Result is 2.",
                    "        DoMultipleMath(14, 7, new MathFunction[] { Add, Subtract, Multiply, Divide }, DoMath);",
                    "    }",
                    "    ",
                    "    public static int Add(int x, int y)",
                    "    {",
                    "        return x + y;",
                    "    }",
                    "    ",
                    "    public static int Subtract(int x, int y)",
                    "    {",
                    "        return x - y;",
                    "    }",
                    "    ",
                    "    public static int Multiply(int x, int y)",
                    "    {",
                    "        return x * y;",
                    "    }",
                    "    ",
                    "    public static int Divide(int x, int y)",
                    "    {",
                    "        return x / y;",
                    "    }",
                    "    ",
                    "    // For each provided MathFunction in functions, runs the applier with it and the two numbers",
                    "    public static void DoMultipleMath(int x, int y, MathFunction[] functions, MathApplier applier)",
                    "    {",
                    "        foreach (MathFunction function in functions)",
                    "        {",
                    "            applier(x, y, function);",
                    "        }",
                    "    }",
                    "    ",
                    "    public static void DoMath(int x, int y, MathFunction stuff)",
                    "    {",
                    "        " + Model.CallFunction(Model.PrintFunction, "\"Result is {0}.\"", "stuff(x, y)") + Model.Semicolon,
                    Model.End,
                }),
                "Create a delegate that takes in two Strings and returns an int. Write one Function that returns their total Length, and another that returns their difference. Use them." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "class Program",
                    "{",
                    "    public delegate int LengthGetter(string a, string b);",
                    "    ",
                    "    static void Main()",
                    "    {",
                    "        // Result is 7.",
                    "        DoStrings(\"hello\", \"my\", GetTotal);",
                    "        ",
                    "        // Result is 3.",
                    "        DoStrings(\"baby\", \"darling\", GetDifference);",
                    "    }",
                    "    ",
                    "    public static int GetTotal(string a, string b)",
                    "    {",
                    "        return a.Length + b.Length;",
                    "    }",
                    "    ",
                    "    public static int GetDifference(string a, string b)",
                    "    {",
                    "        return System.Math.Abs(a.Length - b.Length);",
                    "    }",
                    "    ",
                    "    public static void DoStrings(string a, string b, LengthGetter stuff)",
                    "    {",
                    "        " + Model.CallFunction(Model.PrintFunction, "\"Result is {0}.\"", "stuff(a, b)") + Model.Semicolon,
                    Model.End,
                }),
                "The templated <a href='https://msdn.microsoft.com/en-us/library/bzw8611x(v=vs.110).aspx'>System.Array.Sort</a> takes in an Array of any type, and optionally a Function that takes in two objects of that type and returns their difference (<code>y - x</code>, if given <code>(int x, int y)</code>). Create a Function that returns the difference of two Strings' length, and sort an Array with it." + Section.WrapCode(Model.NameLower, new string[]
                {
                    "class Program",
                    "{",
                    "    public delegate int LengthGetter(string a, string b);",
                    "    ",
                    "    static void Main()",
                    "    {",
                    "        string[] names = new string[] { \"Geralt\", \"Triss\", \"Yennefer\" };",
                    "        ",
                    "        System.Array.Sort(names, GetDifference);",
                    "        ",
                    "        // Yennefer",
                    "        // Geralt",
                    "        // Triss",
                    "        foreach (string name in names)",
                    "        {",
                    "            System.Console.WriteLine(name);",
                    "        }",
                    "    }",
                    "    ",
                    "    public static int GetDifference(string a, string b)",
                    "    {",
                    "        return b.Length - a.Length;",
                    Model.End,
                }),
            })
        }
    });
}