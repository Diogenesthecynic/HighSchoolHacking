@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 8),
        Title = "Arrays",
        Extension = Model.NameLower,
        Back = "/" + Model.Name + "/Learn",
        Large = true,
        Paragraphs = new string[]
        {
            "Arrays in " + Model.Name + " are awesome. They do pretty much everything you'd ever want Arrays to do: single dimensional, multi dimensional, square, jagged, multi-type, you name it.",
            "The rest of this article takes heavily from the <a href='https://msdn.microsoft.com/en-us/library/aa288453(v=vs.71).aspx'>MSDN article</a> on Arrays."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 9),
        Title = "Single Dimensional Arrays",
        Paragraphs = new string[]
        {
            "Arrays can be of any type, and are indicated by putting the <code>[]</code> symbols after a type.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "int[] ints; // An Array of Integers",
                "string[] strings; // An Array of strings"
            }),
            "Arrays default to <code>null</code> unless you assign something to them. You can set them up with an initial size, which will set everything to the <a href='https://msdn.microsoft.com/en-us/library/83fhsxwc.aspx'>default value</a> (0 for numbers, <code>null</code> for Objects), or provide initial values for everything.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "int[] ints = new int[5]; // An Array of five Integers equal to 0",
                "int first = int[0]; // 0",
                "",
                "char[] chars = new char[5] { 'a', 'b', 'c', 'd', 'e' }; // An Array of five Chars",
                "char aleph = chars[0]; // 'a'"
            }),
            "When providing initial values, you can leave out the <code>new</code> and <code>[<em>#</em>]</code> parts for convenience.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "double[] doubles = { 4, 8, 15, 16, 23.0, 42.0 }; // SO CONVENIENT"
            }),
            "By the way, Array length is <code>.Length</code>.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                Model.Start,
                "        double[] doubles = { 4, 8, 15, 16, 23.0, 42.0 };",
                "        " + Model.CallFunction(Model.PrintFunction, "\"There are {0} doubles.\", doubles.Length") + Model.Semicolon,
                Model.End
            }),
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 10),
        Title = "Multi Dimensional Arrays",
        Paragraphs = new string[]
        {
            "You can create multi-dimensional Arrays (Arrays of Arrays) in " + Model.Name + " by putting a comma inside the first <code>[]</code>.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "int[,] ints = new int[2, 4]; // An Array of length 2, storing Integer Arrays of length 5"
            }),
            "Similar to single-dimensional Arrays, you can leave out the size if you provide a default value.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "int[,] numbers = new int[3, 2] { {1, 2}, {3, 4}, {5, 6} };",
                "string[,] siblings = new string[2, 2] { {\"Mike\",\"Amy\"}, {\"Mary\",\"Albert\"} };"
            }),
            "You access members of a multi-dimensional Array using the same brackets, but with commas in them.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "string[,] siblings = new string[2, 2] { {\"Mike\",\"Amy\"}, {\"Mary\",\"Albert\"} };",
                "siblings[0, 1]; // \"Amy\""
            }),
            "Go wild.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "int[,,,,,,,] whynot = {{{{{{{{9001}}}}}}}};"
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 11),
        Title = "Jagged Arrays",
        Paragraphs = new string[]
        {
            "Back to single-dimensional Arrays: there's nothing stopping you from having an Array of Arrays. You can make an Array where the type is an Array:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "// An Array of int[]s",
                "int[][] factors = {",
                "    new int[] { 0 }, // 0's factors: lets just say 0",
                "    new int[] { 1 }, // 1's factors: 1",
                "    new int[] { 1, 2 }, // 2's factors: 1, 2",
                "    new int[] { 1, 2 }, // etc.",
                "    new int[] { 1, 2, 4 },",
                "    new int[] { 1, 5 },",
                "};"
            }),
            "Don't think of jagged Arrays as substantially different from single-dimensional ones. They're just regular Arrays whose type happens to be an Array.",
            "The difference between jagged Arrays and multi-dimensional Arrays is that multi-dimensional Arrays have fixed dimensional sizes, while jagged Arrays are just regular one-dimensional Arrays whose contents happen to be Arrays."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Create an Integer Array of length four. Manually fill it with Integers.",
                "Create a String Array of length three, initialized with Strings.",
                "Create a 4x4 Integer Array that with values initialized to a multiplication table.",
                "Create an Array of Integer Arrays representing the powers of numbers 1-7 that are below 100 (e.g. 4 has 4, 16, and 64)."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Create an Integer Array of length four. Manually fill it with Integers." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        int[] x = new int[4];",
                    "        x[0] = 7;",
                    "        x[1] = 14;",
                    "        x[2] = 21;",
                    "        x[3] = 28;",
                    "        ",
                    "        System.Console.WriteLine(\"Numbers are: {0}, {1}, {2}, {3}\", x[0], x[1], x[2], x[3]);",
                    Model.End
                }),
                "Create a String Array of length three, initialized with Strings." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        string[] y = { \"hello\", \"my\", \"baby\" };",
                    "        ",
                    "        System.Console.WriteLine(\"Strings are: {0}, {1}, {2}\", y[0], y[1], y[2]);",
                    Model.End
                }),
                "Create a 4x4 Integer Array that with values initialized to a multiplication table. Print 2 * 3." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        int[,] table = {",
                    "            { 0, 1, 2, 3 },",
                    "            { 1, 1, 2, 3 },",
                    "            { 2, 2, 4, 6 },",
                    "            { 3, 3, 6, 9 }",
                    "        };",
                    "        ",
                    "        int row = 2;",
                    "        int col = 3;",
                    "        System.Console.WriteLine(\"{0} * {1} = {2}\", row, col, table[row, col]);",
                    Model.End
                }),
                "Create an Array of Integer Arrays representing the powers of numbers 0-7 that are below 100 (e.g. 4 has 4, 16, and 64). Print the powers of 7." + Section.WrapCode(Model.NameLower, new string[]
                {
                    Model.Start,
                    "        int[][] powers = {",
                    "            new int[] { 0 },",
                    "            new int[] { 1 },",
                    "            new int[] { 2, 4, 8, 16, 32, 64 },",
                    "            new int[] { 3, 9, 27, 81 },",
                    "            new int[] { 4, 16, 64 },",
                    "            new int[] { 5, 25 },",
                    "            new int[] { 6, 36 },",
                    "            new int[] { 7, 49 }",
                    "        };",
                    "        ",
                    "        System.Console.WriteLine(\"7 has {0} and {1}\", powers[7][0], powers[7][1]);",
                    Model.End
                }),
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 11),
        Title = "Jagged Arrays",
        Paragraphs = new string[]
        {
            "Back to single-dimensional Arrays: there's nothing stopping you from having an Array of Arrays. You can make an Array where the type is an Array:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "// An Array of int[]s",
                "int[][] factors = {",
                "    new int[] { 0 }, // 0's factors: lets just say 0",
                "    new int[] { 1 }, // 1's factors: 1",
                "    new int[] { 1, 2 }, // 2's factors: 1, 2",
                "    new int[] { 1, 2 }, // etc.",
                "    new int[] { 1, 2, 4 },",
                "    new int[] { 1, 5 },",
                "};"
            }),
            "Don't think of jagged Arrays as substantially different from single-dimensional ones. They're just regular Arrays whose type happens to be an Array.",
            "The difference between jagged Arrays and multi-dimensional Arrays is that multi-dimensional Arrays have fixed dimensional sizes, while jagged Arrays are just regular one-dimensional Arrays whose contents happen to be Arrays."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 12),
        Title = "Multi-type Arrays",
        Paragraphs = new string[]
        {
            "Everything in " + Model.Name + " derives from the generic <code>object</code> class. If you don't know about classes or polymorphism yet, don't worry about it: just know that everything is an <code>object</code>.",
            "So, if you say your Array type is <code>object</code>, you can put anything into it.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "object[] mixed = { 'a', \"bee\", 3, 4.0, new int[] { 5 }, null };"
            }),
            "It'll be slightly slower (<a href='https://msdn.microsoft.com/en-us/library/yz2be5wk.aspx'>long story</a>) but if you don't care about that, you're good."
        }
    });
    
    Html.RenderPartial(Section.SwitcherFile, new KeyValuePair<string, string>(Model.Name, "Arrays"));
}
