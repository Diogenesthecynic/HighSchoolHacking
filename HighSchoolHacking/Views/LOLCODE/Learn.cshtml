@using HighSchoolHacking.Models
@model Language

@{
    int colorIndex = Section.ColorIndices[Model.Color];

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "LOLCODE",
        Large = true,
        Extension = "highschoolhacking",
        Back = "/",
        Paragraphs = new string[] {
            "LOLCODE is one of the weirdest, most unusual languages ever written. It's an <em>esoteric</em> language, which means someone wrote it more to be clever or funny than to actually do anything.",
            "It can't do nearly as much as normal languages, but it has interesting syntax, so we'll go into it for a bit."
        },
        Goto = "/LOLCODE/HelloWorld"
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "Variables",
        Paragraphs = new string[]
        {
            "LOLCODE keeps variables in a similar manner to JavaScript and Python, in that they're loosely typed (you don't have to declare what type they are).",
        },
        Goto = "/LOLCODE/Variables"
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "Comments",
        Paragraphs = new string[]
        {
            "Comments in LOLCODE also work similarly to what you've seen before. They do literally nothing: they're just there to help explain code. They're glorified footnotes that can be very helpful.",
        },
        Goto = "/LOLCODE/Comments"
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "Strings",
        Paragraphs = new string[]
        {
            "In " + Model.Name + ", a 'String' is a bunch of characters (a character is a letter, number, or symbol). To create a String in " + Model.Name + ", put whatever characters you want between two quotes. "
            + (Model.StringAnyApostrophes
                ? "It doesn't matter if they're single apostrophes <code>'</code> or double apostrophes <code>\"</code>; they just have to be the same."
                : "They have to be double apostrophes <code>\"</code>, not single apostrophes <code>'</code>."
                )
        },
        Goto = "/LOLCODE/Strings"
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "Numbers",
        Paragraphs = new string[]
        {
            "Numbers in " + Model.Name + " are just like in calculators. You can do all the basic operations on them (and more): addition, subtraction, multiplication, and division.",
        },
        Goto = "/LOLCODE/Numbers"
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetColorAt(colorIndex += 1),
        Title = "Conditionals",
        Paragraphs = new string[]
        {
            "All the code we've used so far has been static: every single line is evaluated in order. More advanced programs need ways to check conditions and evaulate different code based on them.",
        },
        Goto = "/LOLCODE/Conditionals"
    });
}
