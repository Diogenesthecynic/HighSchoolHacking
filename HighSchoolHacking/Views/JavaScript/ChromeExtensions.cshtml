@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 7),
        Title = "Chrome Extensions",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name,
        Goto = "https://developer.chrome.com/extensions",
        Paragraphs = new string[]
        {
            "Chrome extensions are bits of code that run inside Google Chrome and interact with the web pages you visit. They're written mostly in JavaScript which means we can apply everything else learned thus far into making some cool extensions.",
            "We make one here that replaces words with other words, like in the Name Typos activity, and you could also make extensions to do the Cookie Clicker, Bouncing Elements, and Random Exclamations examples.",
            "A strong word of warning: Chrome extensions have a lot of complicated parts that we <em>won't</em> go into. This happens a lot with programming, especially when you're making webpages, apps, or larger programs. If you're interested in learning more, you can always go to the Google Developer site."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 8),
        Title = "How Chrome Extensions Work",
        Goto = "/Content/Files/Extensions/SampleChromeExtension.zip",
        Paragraphs = new string[]
        {
            "The simple extensions we'll be making have the following files:",
            Section.WrapList(false, new string[]
            {
                "A <strong>manifest file</strong> <em>(.json)</em>",
                "A <strong>JavaScript file</strong> <em>(.js)</em>"
            }),
            Section.WrapHead("The Manifest"),
            "The manifest file is what tells Chrome which files are used for what. It has a lot of settings, some of which we'll go into.",
            Section.WrapCode("javascript", new string[]
            {
                "{",
                "    \"name\": \"Best Extension Ever!\",",
                "    \"description\": \"A sample extension that does almost nothing.\",",
                "    \"version\": \"1.0\",",
                "    \"manifest_version\": 2,",
                "    \"content_scripts\": [",
                "        {",
                "            \"matches\": [",
                "                \"<all_urls>\"",
                "            ],",
                "            \"js\": [",
                "                \"extension.js\"",
                "            ]",
                "        }",
                "    ]",
                "}"
            }),
            Section.WrapList(false, new string[]
            {
                "<em>name</em> - Whatever you want to call your extension.",
                "<em>description</em> - A short description of your extension.",
                "<em>version</em> - The extension version. Start with 1.0, and increase that to 1.1, 1.2, etc. as you add features.",
                "<em>manifest_version</em> - What style of manifest you're using (just put 2).",
                "<em>content_scripts</em> - The stuff the app will run in the background of pages it's given permission to (for this one, all URLs). In this case, it says the <em>extension.js</em> script is to be run on all web pages."
            }),
            "There are a lot of other settings you can have in there, but we won't go into them.",
            Section.WrapHead("The JavaScript File"),
            "If you remember using <code>.py</code> files in WingIDE, this is the same thing. Your JavaScript <code>.js</code> file's code is run as soon as the webpage starts to load.",
            Section.WrapCode("javascript", new string[]
            {
                "console.log(\"Hello world!\");"
            }),
            "Yup, that's the whole file. We'll make more complicated scripts later."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 9),
        Title = "Getting Started",
        Paragraphs = new string[]
        {
            "In Chrome, go to <strong>chrome://extensions</strong>. This your Chrome's hub for managing your extensions.",
            "Enable the <em>Developer mode</em> checkbox in the top-right corner of the page. You'll be making your own extensions, so that makes you a developer. Whoo!",
            Section.WrapImage("ChromeExtensions/ChromeExtensionsPage.png"),
            "To add your own extension to your Chrome, click the <em>Load unpacked extension...</em> button in the top center. Don't worry about the second field; just point the first one to the folder containing your extension files (most importantly, manifest.json).",
            "If you're using the .zip linked above, make sure to extract them first!",
            Section.WrapImage("ChromeExtensions/ChromeLoadExtensions.png"),
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Get Chrome to recognize the sample app.",
                "Open your console on this page, then refresh. Make sure the \"Hello world!\" message is displayed, so the sample extension is working."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 10),
        Title = "Text Replacement",
        Paragraphs = new string[]
        {
            "<a href=\"https://chrome.google.com/webstore/detail/cloud-to-butt-plus/apmlngnhgbnjpajelfkmabhkfapgnoai\">Cloud to Butt Plus</a> is a good example of a Chrome extension. In short, it replaces the text \"the cloud\" with \"my butt\", as well as \"cloud\" with \"butt\". You've already learned how to change the <code>.innerText</code> property of elements, so this is something we can definitely do automatically in an extension.",
            ""
        }
    });
}