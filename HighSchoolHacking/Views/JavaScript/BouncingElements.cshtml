@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 5),
        Title = "Bouncing Elements",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Paragraphs = new string[]
        {
            "JavaScript and CSS can work together to let you change all sorts of information on elements in web pages. This activity will teach you how to recolor, resize, reshape, and move around elements around on a page, then finally \"bounce\" a round element around like a ball.",
            "If you're ever bored, there's an exhaustive list of pretty much all CSS properties <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Reference\">here</a>, but we'll teach you only the ones you need to know for this activity."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 6),
        Title = "Cascading Style Sheets",
        Paragraphs = new string[]
        {
            "HTML elements on the screen are styled using something called CSS (Cascading Style Sheets). CSS controls literally everything about the element, from what color it is to how it's positioned on the page.",
            "CSS does this via \"attributes\" such as <em>color</em> (what color an element's text is). There are a bagillion different attributes so knowing which one to use is just memorization. Most people oftentimes need to look up what attributes are called because there are so many. For example, in making this page I couldn't remember how to make text <em>italic</em>, so I looked up <a href=\"https://www.bing.com/search?q=css+make+text+italic&PC=U316&FORM=CHROMN\" target=\"_blank\">\"CSS make text italic\"</a> and the first few results all pointed to using <em>font-style: italic</em>.",
            Section.WrapHead("CSS & Developer Tools"),
            "You can use Developer Tools to modify an element's CSS (also called its <em>style</em>). Once you've clicked on an element in the Elements tab, on the right side of the DevTools there should be a box that has <code>element.style</code> near the top.",
            Section.WrapImage("DeveloperTools/ElementStyle.png"),
            "You can easily add styles by clicking on that box and typing whatever styles you want to add to the selected element. Start by selecting this paragraph and giving it <code>color: red;</code>.",
            Section.WrapCode("css", new string[] {
                "color: red;"
            }),
            "The semicolon at the end is necessary. Your DevTools should give you autocomplete drop-down menus, which are incredibly useful (look at all those colors!)."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            "<em>Protip: we haven't told you how to do most of these CSS properties, look them up online!</em>",
            Section.WrapList(new string[]
            {
                "Turn the header for this page chartreuse using the DevTools.",
                "Make this sentence bold using the DevTools. <em>Hint: font-weight!</em>",
                "Make this sentence italic using the DevTools.",
                "Make this sentence bold, italic, and colored azure using the DevTools.",
                "Make this sentence use Comic Sans MS as the font-family, be colored pink, and be 70% transparent using the DevTools."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Turn the header for this page chartreuse using the DevTools." + Section.WrapCode("css", new string[]
                {
                    "color: chartreuse;"
                }),
                "Make this sentence bold using the DevTools. <em>Hint: font-weight!</em>" + Section.WrapCode("css", new string[]
                {
                    "font-weight: bold;"
                }),
                "Make this sentence italic using the DevTools." + Section.WrapCode("css", new string[]
                {
                    "font-style: italic;"
                }),
                "Make this sentence bold, italic, and colored azure using the DevTools." + Section.WrapCode("css", new string[]
                {
                    "font-weight: bold;",
                    "font-style: italic;",
                    "color: azure;"
                }),
                "Make this sentence use Comic Sans MS as the font family, be colored pink, and be 70% transparent using the DevTools." + Section.WrapCode("css", new string[]
                {
                    "color: pink;",
                    "font-family: \"Comic Sans MS\";",
                    "opacity: .7"
                }),
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 7),
        Title = "CSS via JavaScript",
        Paragraphs = new string[]
        {
            "Remember <code>document.querySelectorAll</code>? The elements you get from that have a <code>.style</code> attribute that lets you access that element's CSS styles. <code>.style</code> is used the same way you would normally use an Object:",
            Section.WrapCode("javascript", new String[]
            {
                "// Turns all the paragraphs on the page pink...",
                "var elements = document.querySelectorAll(\"p\");",
                "for (var i = 0; i < elements.length; i = i + 1) {",
                "    elements[i].style.color = \"pink\";",
                "}"
            }),
            "The naming scheme for <code>.style</code> is unfortunately a bit different from CSS's. CSS prefers <code>word-word</code> (<code>font-weight</code>, <code>font-style</code>, etc.) while JavaScript prefers <code>wordWord</code> (<code>fontWeight</code>, <code>fontStyle</code>, etc.). The JavaScript style is something called <a href=\"http://en.wikipedia.org/wiki/CamelCase\">Camel Case</a>, which you should always try to use (don't call your variables <code>some_name</code> or <code>somename</code>; <code>someName</code> is better).",
            "Also note that attributes in CSS don't need quotes (you can have them if you want, but they're unnecessary). JavaScript uses the typical String/Number convention for CSS styles, where all Strings (e.g. \"green\", \"bold\") are in quotes and Numbers (e.g. 0, 35, 0.7) aren't."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            "<em>Protip: we haven't told you how to do most of these CSS properties in JavaScript, you might have to look them up online!</em>",
            Section.WrapList(new string[]
            {
                "Turn the header for this page chartreuse using JavaScript.",
                "Make all paragraphs bold using JavaScript. <em>Hint: font-weight!</em>",
                "Make all paragraphs italic using JavaScript.",
                "Make all paragraphs bold, italic, and colored azure using JavaScript.",
                "Make all paragraphs use Comic Sans MS as the font-family, be colored pink, and be 70% transparent using JavaScript."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Turn the header for this page chartreuse using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"h1\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    elements[i].style.color = \"chartreuse\";",
                    "}"
                }),
                "Make all paragraphs bold using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"p\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    elements[i].style.fontWeight = \"bold\";",
                    "}"
                }),
                "Make all paragraphs italic using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"p\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    elements[i].style.fontStyle = \"italic\";",
                    "}"
                }),
                "Make all paragraphs bold, italic, and colored azure using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"p\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    element = elements[i];",
                    "    element.style.fontWeight = \"bold\";",
                    "    element.style.fontStyle = \"italic\";",
                    "    element.style.color = \"chartreuse\";",
                    "}"
                }),
                "Make all paragraphs use Comic Sans MS as the font-family, be colored pink, and be 70% transparent using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"p\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    element = elements[i];",
                    "    element.style.color = \"pink\";",
                    "    element.style.fontFamily = \"Comic Sans MS\";",
                    "    element.style.opacity = 0.7;",
                    "}"
                })
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 8),
        Title = "Positioning",
        Paragraphs = new string[]
        {
            "Hold onto your hats; this will get complicated but end up making sense.",
            "The <code>position</code> tag determines how an element is positioned on the page: relative to the elements before it, relative to its container, relative to the page, etc.",
            Section.WrapList(false, new string[]
            {
                "<code>initial</code> - Normal behavior, nothing special.",
                "<code>absolute</code> - Relative to the page itself.",
                "<code>fixed</code> - Relative to the surrounding browser."
            }),
            "Along with this, you can use the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> as measurements to specify offset. We'll be using pixel measurements, so in the format \"7px\" would mean seven pixels from the top.",
            Section.WrapCode("css", new string[]
            {
                "position: fixed;",
                "top: 7px;",
                "left: 0; /* It's ok (actually preferred) to just write 0 instead of 0px. */"
            }),
            "The rest of this lesson focuses mainly on giving elements <code>position: fixed</code> with <code>top</code> and <code>left</code>.",
            "Just to test this out, try giving this sentence's paragraph the above CSS styles. Instead of being a part of the Positioning section, it should now be on the top-left corner of the page, and not move at all when you scroll around."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make the page's main header fixed on top of the screen using the DevTools.",
                "Make the page's main header fixed on top of the screen using JavaScript.",
                "Make the page's main header fixed 70px below the top of the screen and 7px from the right of the screen using JavaScript. <em>Hint: in JavaScript, adding a Number to a String makes a new String!</em>",
                "Make all paragraphs fixed to the right, bottom, and left, of the screen, colored pink, and with a white background. What does this do to their width?"
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "brown",
        Title = "Solutions",
        Contracted = true,
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Make the page's main header fixed on top of the screen using the DevTools." + Section.WrapCode("css", new string[]
                {
                    "position: fixed;",
                    "top: 0;"
                }),
                "Make the page's main header fixed on top of the screen using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"h1\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    element = elements[i];",
                    "    element.style.position = \"fixed\";",
                    "    element.style.top = 0;",
                    "}"
                }),
                "Make the page's main header fixed 70px below the top of the screen and 7px from the right of the screen using JavaScript." + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"h1\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    element = elements[i];",
                    "    element.style.position = \"fixed\";",
                    "    element.style.top = \"70px\";",
                    "    element.style.right = \"7px\";",
                    "}"
                }),
                "Make all paragraphs fixed to the right, bottom, and left, of the screen, colored pink, and with a white background. What does this do to their width?" + Section.WrapCode("javascript", new string[]
                {
                    "var elements = document.querySelectorAll(\"p\");",
                    "for (var i = 0; i < elements.length; i = i + 1) {",
                    "    element = elements[i];",
                    "    element.style.position = \"fixed\";",
                    "    element.style.right = 0;",
                    "    element.style.bottom = 0;",
                    "    element.style.left = 0;",
                    "    element.style.color = \"pink\";",
                    "    element.style.background = \"white\"; /* Alternately, you could use backgroundColor. */",
                    "}"
                }) + "A bunch of them are stretched all the way horizontally."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 9),
        Title = "Positioning",
        Paragraphs = new string[]
        {
            "The last new feature (phew!) you need to know is <code>.getBoundingClientRect()</code>. It's a member Function of HTML elements that returns an Object with <code>.top</code>, <code>.right</code>, <code>.bottom</code>, <code>.left</code>, <code>.width</code>, and <code>.height</code> measurements for the element. The position (top, right, bottom, left) measurements are where the element is on the page relative to the browser's viewable window, and the size (width, height) of the element.",
            Section.WrapCode("javascript", new string[]
            {
                "var element = document.querySelectorAll(\"p\")[0];",
                "console.log(element.getBoundingClientRect());"
            }),
            "You can use this to tell if the element is partially outside of the screen. If top is negative, that means the top of the element is above the visible screen. If left is negative, the left of the element is to the left of the visible screen.",
            "JavaScript keeps a glocal <code>innerWidth</code> variable equal to the width of the screen and an <code>innerHeight</code> equal to the height, so you can use those to check if right or bottom are too big.",
            "The goal of this whole lesson is to make an element bounce around the screen, and the way you'll be able to do that is:",
            Section.WrapList(new string[]
            {
                "Positioning the element using <code>position: fixed</code>.",
                "Keeping track of the element's position and velocity using separate Numbers.",
                "Continuously changing the element's position using a Function called by <code>setInterval</code>."
            }),
            "That's a lot to ask so we'll guide you through it. The circle below has an <code>id = \"tester\"</code> so you can use it for the activity.",
            "<div id=\"tester\" style=\"border-radius: 100%; width: 35px; height: 35px; background: red;\"></div>",
            "To start, you might find the following code block helpful. You don't have to use it if you don't want, but it's a good idea to look at it.",
            Section.WrapCode("javascript", new string[]
            {
                "var distanceTop = 0;",
                "var element = document.querySelectorAll(\"#tester\")[0];",
                "",
                "element.style.position = \"fixed\";",
                "element.style.top = \"0px;\"",
                "",
                "function upkeep() {",
                "    element.style.top = distanceTop + \"px\";",
                "}",
                "",
                "setInterval(upkeep, 1000 / 60);"
            }),
            "The way this code works is it keeps track of the distanceTop for the element, and every 16 milliseconds sets the element's top style to be equal to it. It's 16 milliseconds because 1000 milliseconds divided by 60 frames per second = 16.666... for that nice 60 frames per second experience.",
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            Section.WrapList(new string[]
            {
                "Also keep track of the distanceLeft for the element, and continuously set both the top and left styles.",
                "Add in a vertical velocity to change the distanceTop by every upkeep.",
                "Add in a horizontal velocity to change the distanceLeft by every upkeep.",
                "Make upkeep use element.getBoundingClientRect() every upkeep to check if it's horizontally out of bounds, and multiply its horizontal velocity by -1 if so.",
                "Make upkeep use element.getBoundingClientRect() every upkeep to check if it's vertically out of bounds, and multiply its vertical velocity by -1 if so."
            }),
            Section.WrapHead("Bonuses"),
            Section.WrapList(new string[]
            {
                "Add a gravity effect to vertical velocity.",
                "Whenever the element \"collides\" with the screen, change its background color.",
                "Instead of using the <code>#tester</code> element, try making your code work for different elements (such as paragraphs or headers).",
                "Instead of using <code>position: fixed</code>, try using <code>position: relative</code>. What changes? Does it still work?"
            })
        }
    });
}