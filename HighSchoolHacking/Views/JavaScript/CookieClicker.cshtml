@using HighSchoolHacking.Models
@model Language

@{
    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 4),
        Title = "Cookie Clicker",
        Extension = Model.NameLower,
        Large = true,
        Back = "/" + Model.Name + "/Learn",
        Goto = "http://orteil.dashnet.org/cookieclicker/",
        Paragraphs = new string[]
        {
            "Cookie Clicker is a web game where you click a cookie to gain cookies, which you can then spend on tools to get you more cookies. It's a great game based on an ingenously dumb concept, and ripe for JavaScript to play with it. This lesson teaches you how to cheat at Cookie Clicker using Functions and <code>setTimeout</code>/<code>setInterval</code>.",
            "If you haven't already, read up on <a href=\"/JavaScript/Functions\">Functions</a>."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 5),
        Title = "setTimeout",
        Paragraphs = new string[]
        { 
            "<em>synchronous [<code>ˈsiNGkrənəs</code>] - events occuring within the main program flow.</em>",
            "<em>asynchronous [<code>āˈsiNGkrənəs</code>] - events occurring independently of the main program flow.</em>",
            "JavaScript provides a Function called <code>setTimeout</code> that has a Function and a number as parameters, and tells the browser to call that Function in that number of milliseconds. This means you can write code that is <code>asynchronous</code> (events fire off randomly) rather than <code>synchronous</code> (everything happens in an exact order).",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "function sayHello() {",
                "    console.log(\"Hello world!\");",
                "}",
                "",
                "setTimeout(sayHello, 3000); // Waits 3 seconds, then \"Hello world!\""
            }),
            "You can have your Functions also call <code>setTimeout</code> to make something keep on getting scheduled:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "function sayHelloAgain() {",
                "    console.log(\"Hello world!\");",
                "    setTimeout(sayHelloAgain, 3000);",
                "}",
                "",
                "setTimeout(sayHello, 3000); // Every 3 seconds: \"Hello world!\""
            }),
            Section.WrapCode(Model.NameLower, new string[]
            {
                "var timeDelay = 1000;",
                "",
                "function sayHelloAgain() {",
                "    console.log(\"Hello world!\");",
                "    setTimeout(sayHelloAgain, timeDelay);",
                "    timeDelay += 1000;",
                "}",
                "",
                "sayHelloAgain(); // \"Hello world!\" after 1 second, then 2, then 3, ..."
            })
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 6),
        Title = "setInterval",
        Paragraphs = new string[]
        {
            "<code>setInterval</code> is almost the exact same as <code>setTimeout</code>, except it keeps on calling the given Function on an interval, rather than just once. The difference in time between calls is the given number.",
            "The following two code blocks are pretty much the same:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "function sayHelloAgain() {",
                "    setTimeout(sayHelloAgain, 3000);",
                "    console.log(\"Hello world!\");",
                "}",
                "",
                "setTimeout(sayHello, 3000); // Every 3 seconds: \"Hello world!\""
            }),
            Section.WrapCode(Model.NameLower, new string[]
            {
                "function sayHello() {",
                "    console.log(\"Hello world!\");",
                "}",
                "",
                "setInterval(sayHello, 3000); // Every 3 seconds: \"Hello world!\""
            }),
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 7),
        Title = "Enter Console",
        Paragraphs = new string[]
        { 
            "Developer Tools are how we're going to break Cookie Clicker. Open yours to the Console tab, and enter <code>Game</code>. What you see there is the Object referring to the game in JavaScript, complete with all the member variables and Functions used by it.",
            "There are a lot of things there (most of which are useless to us), but the one really important Function is <code>Game.Earn(howmuch)</code>. Reading it, do you see what it does?",
            "Fun fact: JavaScript lets you use <code>Infinity</code> as a Number. This is relevant.",
            "<em>Bonus: can you find the Function that unlocks everything?</em>"
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = Section.GetNextColor(Model.Color, 8),
        Title = "Mouse Events",
        Paragraphs = new string[]
        { 
            "Faking Game.Earn is fun, but it doesn't do very much, and gets old pretty quickly. It would be better if the various features in the game were usable, like store items, auto-clickers, and actual cookie clicking.",
            "Normal people would use a mouse or touchscreen to click HTML elements on the Cookie Clicker page to trigger those achivements. Things like touch/clicking are referred to as \"events\" in web programming, and HTML elements accessed in JavaScript let you fake them. The <code>click</code> event in particular is accessable by the <code>.click()</code> Function of elements:",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "var cookie = document.querySelector(\"#bigCookie\");",
                "cookie.click();"
            }),
            "If your first instinct is to set a giant amount of <code>setInterval</code> calls to continuously do that, you're on the right path. A bit of optimization advice, though: keep the <code>var cookie</code> <em>outside</em> your Functions. Your code will run a lot slower if <code>document.querySelector</code> has to be called each time.",
            Section.WrapCode(Model.NameLower, new string[]
            {
                "var cookie = document.querySelector(\"#bigCookie\");",
                "function clickCookie() {",
                "    cookie.click();",
                "}"
            }),
            "This will get you a nice start, but once you get past a few thousand cookies, it's a lot slower. Try using the same <code>.click()</code> from the auto-clicking elements, or store items."
        }
    });

    Html.RenderPartial(Section.ViewFile, new Section
    {
        Color = "steel",
        Title = "Exercises",
        Paragraphs = new string[]
        {
            "Note: though your code may request very rapid intervals, the browser might slow down if you're doing too much.",
            Section.WrapList(new string[]
            {
                "Write code that automatically clicks the cookie every few milliseconds.",
                "Write code that continuously attempts to purchase upgrades in the store.",
                "Modify your auto-clicker purchasing code to buy the most expensive available item. <em>Hint: class names!</em>",
                "Write code that continuously attempts to obtain auto-clickers.",
                "Modify your auto-clicker purchasing code to buy the most expensive available auto-clickers.",
            })
        }
    });
}